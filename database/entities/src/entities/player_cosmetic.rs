//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.12



use sea_orm :: entity :: prelude :: * ;

# [derive (Clone , Debug , PartialEq , DeriveEntityModel , Eq)] # [sea_orm (table_name = "player_cosmetic")] pub struct Model { # [sea_orm (primary_key , auto_increment = false)] pub player : Uuid , # [sea_orm (primary_key , auto_increment = false)] pub cosmetic : i32 , pub transaction_id : String , }

# [derive (Copy , Clone , Debug , EnumIter , DeriveRelation)] pub enum Relation { # [sea_orm (belongs_to = "super::cosmetic::Entity" , from = "Column::Cosmetic" , to = "super::cosmetic::Column::Id" , on_update = "NoAction" , on_delete = "NoAction" ,)] Cosmetic , # [sea_orm (belongs_to = "super::player::Entity" , from = "Column::Player" , to = "super::player::Column::MinecraftUuid" , on_update = "NoAction" , on_delete = "NoAction" ,)] Player , }

impl Related < super :: cosmetic :: Entity > for Entity { fn to () -> RelationDef { Relation :: Cosmetic . def () } }

impl Related < super :: player :: Entity > for Entity { fn to () -> RelationDef { Relation :: Player . def () } }

impl ActiveModelBehavior for ActiveModel { }