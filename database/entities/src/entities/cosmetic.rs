//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.12



use sea_orm :: entity :: prelude :: * ; use super :: sea_orm_active_enums :: CosmeticType ;

# [derive (Clone , Debug , PartialEq , DeriveEntityModel , Eq)] # [sea_orm (table_name = "cosmetic")] pub struct Model { # [sea_orm (primary_key)] pub id : i32 , pub r#type : CosmeticType , pub path : Option < String > , }

# [derive (Copy , Clone , Debug , EnumIter , DeriveRelation)] pub enum Relation { # [sea_orm (has_many = "super::cosmetic_package::Entity")] CosmeticPackage , # [sea_orm (has_many = "super::user_cosmetic::Entity")] UserCosmetic , }

impl Related < super :: cosmetic_package :: Entity > for Entity { fn to () -> RelationDef { Relation :: CosmeticPackage . def () } }

impl Related < super :: user_cosmetic :: Entity > for Entity { fn to () -> RelationDef { Relation :: UserCosmetic . def () } }

impl Related < super :: user :: Entity > for Entity { fn to () -> RelationDef { super :: user_cosmetic :: Relation :: User . def () } fn via () -> Option < RelationDef > { Some (super :: user_cosmetic :: Relation :: Cosmetic . def () . rev ()) } }

impl ActiveModelBehavior for ActiveModel { }