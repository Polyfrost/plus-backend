//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.12



use sea_orm :: entity :: prelude :: * ; use super :: sea_orm_active_enums :: CosmeticType ;

# [derive (Clone , Debug , PartialEq , DeriveEntityModel , Eq)] # [sea_orm (table_name = "cosmetic")] pub struct Model { # [sea_orm (primary_key)] pub id : i32 , pub r#type : Option < CosmeticType > , pub path : String , }

# [derive (Copy , Clone , Debug , EnumIter , DeriveRelation)] pub enum Relation { # [sea_orm (has_many = "super::player_cosmetic::Entity")] PlayerCosmetic , }

impl Related < super :: player_cosmetic :: Entity > for Entity { fn to () -> RelationDef { Relation :: PlayerCosmetic . def () } }

impl Related < super :: player :: Entity > for Entity { fn to () -> RelationDef { super :: player_cosmetic :: Relation :: Player . def () } fn via () -> Option < RelationDef > { Some (super :: player_cosmetic :: Relation :: Cosmetic . def () . rev ()) } }

impl ActiveModelBehavior for ActiveModel { }